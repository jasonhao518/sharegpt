// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  conversations Conversation[]
  saves         Save[]
  comments      Comment[]
  

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}



model Conversation {
  id        String    @id
  title     String
  avatar    String?
  content   Json?
  private   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  creatorId String?
  creator   User?     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  views     Int       @default(0)
  saves     Save[]
  comments  Comment[]

  @@index([creatorId])
  @@index([views(sort: Desc)])
  @@index([createdAt])
  @@index([private])
}
model Save {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
}

model Comment {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  content         String       
  position        Int
  parentCommentId String?
  parentComment   Comment?     @relation("Thread", fields: [parentCommentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  childComments   Comment[]    @relation("Thread")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([conversationId])
  @@index([userId])
  @@index([parentCommentId])
  @@index([conversationId, parentCommentId])
  @@index([conversationId, parentCommentId, createdAt])
  @@index([conversationId, position])
  @@index([conversationId, position, parentCommentId, createdAt])
}
